import os, re

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '&g$n5#3mz^d^34#j#a2313l)svdr40d6k(5r4-r9r7e*wj)f7d')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False)

ALLOWED_HOSTS = [ "%s" % os.environ.get('SITE_DOMAIN', '*')]

# SITE INFORMATION
SITE_PROTOCOL = "http://"
SITE_DOMAIN = os.environ.get('SITE_DOMAIN', '127.0.0.1:8000')
SITE_URL = "%s%s" % (SITE_PROTOCOL, SITE_DOMAIN)
SITE_TITLE = os.environ.get('SITE_TITLE', 'Krypted Platform')
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/tmp/')

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_countries',
    'django_celery_beat',
    'django_singleton_admin',
    'crispy_forms',
]
EXTENSIONS = [ 'packagebinder', ]
if os.environ.get('INSTALLED_APPS'):
    for APP in os.environ.get('INSTALLED_APPS').split(","):
        if APP and APP != '': 
            EXTENSIONS.append(str(re.sub(r'[^\w\s]','', APP)))

INSTALLED_APPS = DJANGO_APPS + EXTENSIONS

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['app/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'context_processors.installed_apps',
                'context_processors.sidebar_extensions',
                'context_processors.site_name',
            ],
        },
    },
]


WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'eve_static': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.environ.get('EVE_STATIC_DATABASE', '/opt/eveonline/static/sqlite-latest.sqlite'),
    }
}

if os.environ.get('DATABASE', 'SQLLITE') == "MYSQL":
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('MYSQL_DATABASE', 'krypted'),
        'USER': os.environ.get('MYSQL_USER', 'krypted'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', 'somepassword'),
        'HOST': os.environ.get('MYSQL_HOST', 'db'),
        'PORT': os.environ.get('MYSQL_PORT', '3306'),
	'OPTIONS': {
            'charset': 'utf8mb4',
            'use_unicode': True, 
        }
    }
else:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# STATIC FILES
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "app/static")
]

# SMTP
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = os.environ.get('EMAIL_PORT', '587')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', True)
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', '')

# Django Caching
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'krypted_cache_table',
    }
}

# Django Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'pyswagger': {
            'level': 'NOTSET',
            'propagate': False,
        },
        'urllib3': {
            'level': 'NOTSET',
            'propagate': False,
        },
        'django.request': {
            'level': 'ERROR',
            'propogate': False,
        }
    },
}

