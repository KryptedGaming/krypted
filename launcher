#!/bin/bash

usage () {
  echo "Usage: ${0} COMMAND CONFIG [--skip-prereqs] [--docker-args STRING]"
  echo "Commands:"
  echo "    env:       Create a Python virtual environment"
  echo "    install:   Installs developer environment"
  echo "    test:      Run tests with coverage"
  echo "    run:       Runs Django webserver"
  echo "    start:     Runs the Django webserver"
  echo "    migrate:   Runs the Django migrations"
  echo "    celery:    Runs celery worker and beat"
  echo "    flower:    Runs celery flower"
  echo "    shell:     Runs the django shell"
  echo "    build:     Builds the Docker images"
}

command=$1

if [ -z "$command" ]; then
    usage
    exit 1
fi

run_env() {
    python3 -m venv myvenv
}

run_build() {
    docker build -t kryptedgaming/krypted --build-arg VERSION=$(git rev-parse --abbrev-ref HEAD) ./docker/app/ --no-cache
    docker build -t kryptedgaming/krypted_celery --build-arg VERSION=$(git rev-parse --abbrev-ref HEAD) ./docker/celery/ --no-cache
}
run_install() {
    export INSTALLED_APPS=accounts,group_requests,applications
    echo "Installing the Krypted Platform developer environment"
    if [ ! -d "./app" ]; then
        echo "Please run in the root project directory"
        exit 1
    fi

    command=$1

    if [ -n "$command" ]; then
        case "$command" in 
            dev)
            DEV_MODE=true
            ;;
            *)
            usage
            exit 1
            ;;
        esac
    fi

    # Install python requirements
    echo "Installing Python Requirements"
    pip3 install -r requirements.txt
    if [ $? -ne 0 ]; then 
        echo "Failed to install Python requirements"
        exit 1
    fi 
    if [ $DEV_MODE ]; then
        echo "Installing Python Development Requirements"
        pip3 install coverage pytest pytest-cov python-coveralls sphinx-markdown-tables django-extensions ipython notebook
        if [ $? -ne 0 ]; then 
            echo "Failed to install Python Development requirements"
            exit 1
        fi 
    fi

    # Install Developer Settings
    cp ./conf/settings.py.example ./app/app/settings.py

    # Set up the Django project
    echo "Setting up the Django Project"
    echo "Creating migrations for project"
    python3 ./app/manage.py makemigrations
    if [ $? -ne 0 ]; then 
        echo "Failed to set up the Django project"
        exit 1
    fi 
    echo "Creating migrations for specific subprojects"
    python3 ./app/manage.py makemigrations accounts
    if [ $? -ne 0 ]; then 
        echo "Failed to set up the Django project"
        exit 1
    fi 
    echo "Creating database for project"
    python3 ./app/manage.py migrate 
    if [ $? -ne 0 ]; then 
        echo "Failed to set up the Django project"
        exit 1
    fi 

    # Create STATIC directory
    mkdir -p ./app/app/static
    mkdir -p ./app/accounts/static

    # Install AdminLTE UI
    echo "Installing AdminLTE in app/static/adminlte/"
    wget https://github.com/KryptedGaming/krypted/releases/download/v4.0.0/AdminLTE-2.4.15.tar.gz > /dev/null
    tar -xvf AdminLTE-2.4.15.tar.gz -C ./app/app/static/ > /dev/null
    rm AdminLTE-2.4.15.tar.gz*

    # Install AccountStylingV2
    echo "Installing Accounts Styling in app/static/accounts"
    wget https://github.com/KryptedGaming/krypted/releases/download/v4.0.0/Accounts_v12.tar.gz > /dev/null
    tar -xvf Accounts_v12.tar.gz -C ./app/accounts/static/ > /dev/null
    rm Accounts_v12.tar.gz*

    # Collect static
    python3 ./app/manage.py collectstatic > /dev/null

    # Create cache table
    python3 ./app/manage.py createcachetable > /dev/null

    echo "INSTALL COMPLETE. Add django_extensions to your DJANGO_APPS in settings.py"
}

run_test() {
    coverage run --omit=**/tests/**.py,**/tests.py,./install/*,./launcher,**/wsgi.py,**/manage.py --source=./app/. ./app/manage.py test $1 --noinput --settings=app.settings
    coverage xml
    coverage html
}

run_server() {
    cd ./app/
    python3 manage.py runserver
}

run_shell() {
    cd ./app/
    python3 manage.py shell_plus
}

run_migrate() {
    cd ./app/
    python3 manage.py makemigrations
    python3 manage.py migrate 
    cd ..
}

run_celery() {
    cd ./app/
    celery -A app worker --beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=debug
}

run_celery_flower() {
    cd ./app/
    celery flower -A app --address=127.0.0.1 --port=5555
}

case "$command" in 
    env)
        run_env
        echo "Virtual Environment created"
        exit 0
        ;;
    
    install)
        run_install
        exit 0
        ;;
    build)
        run_build 
        exit 0
        ;;
    test)
        run_test $2
        exit 0
        ;;
    run)
        run_server 
        exit 0
        ;;
    start)
        run_server 
        exit 0
        ;;
    celery)
        run_celery 
        exit 0 
        ;;
    flower)
        run_celery_flower 
        exit 0 
        ;;
    shell)
        run_shell 
        exit 0 
        ;;
    migrate) 
        run_migrate 
        exit 0 
        ;;
    *)
        usage
        exit 1
        ;;
esac
